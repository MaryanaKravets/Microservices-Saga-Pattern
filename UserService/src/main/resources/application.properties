server.port=8014
spring.application.name=user-service
eureka.client.service-url.defaultZone=http://localhost:8010/eureka
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

spring.datasource.url=jdbc:postgresql://localhost:5432/userdb
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=ps
spring.datasource.password=ps
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

#spring.config.import=optional:configserver:http://localhost:8888

token.expiration.time=1800000
token.secret=secret
inner.token.secret=inner_secret

#connection credentials to rabbitmq server
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

logging.level.com.example.restoranservice.service.ProductServiceClient=DEBUG
# file for logs, will be created in root dir
logging.file.name=./UserService/user-ws.log

server.error.include-message=always

management.endpoints.web.exposure.include=*
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

info.app.name=Spring Sample Application
info.app.description=This is my first spring boot application
info.app.version=1.0.0

## in percentage When the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls.
#resilience4j.circuitbreaker.instances.warehouse-service.failure-rate-threshold=50
###
#resilience4j.circuitbreaker.instances.warehouse-service.automatic-transition-from-open-to-half-open-enabled=true
### wait 10s for transition from open to half open state (s/ms)
#resilience4j.circuitbreaker.instances.warehouse-service.wait-duration-in-open-state=10s
### or time based - Configures the type of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed.
###Sliding window can either be count-based or time-based.
###If the sliding window is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated.
###If the sliding window is TIME_BASED, the calls of the last slidingWindowSize seconds recorded and aggregated.
#resilience4j.circuitbreaker.instances.warehouse-service.sliding-window-type=COUNT_BASED
###Configures the size of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed.
#resilience4j.circuitbreaker.instances.warehouse-service.sliding-window-size=2
##Configures the minimum number of calls which are required (per sliding window period) before the CircuitBreaker can calculate the error rate or slow call rate.
#resilience4j.circuitbreaker.instances.warehouse-service.minimum-number-of-calls=1
#resilience4j.circuitbreaker.instances.warehouse-service.event-consumer-buffer-size=10
#
#resilience4j.circuitbreaker.instances.warehouse-service.register-health-indicator=true
